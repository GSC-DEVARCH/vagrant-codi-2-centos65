#+TITLE: CODI-2 Development Environment
#+OPTIONS: ^:nil

* Introduction
The system will run the following main software components:

- CentOS 6.5
- Unified Views 2.3.0 ([[https://github.com/UnifiedViews][Github]])
- MySQL 5.6 ([[https://www.mysql.com][Homepage]])
- Tomcat7 & Java7 (Installed packages, assuming [[https://grips.semantic-web.at/pages/viewpage.action?pageId=50929588][DPU]] development)

It has been tested using the setup described in "Before starting".
The installation process is two step (at present):

- Build the VM (using Vagrant)
- Install the UV software on the VM
  - choose the configuration wanted, which could be allowing
    downloading of packages or using an ms-sql database rather than
    mysql.

*WARNING:* THIS VAGRANT MACHINE SHOULD NOT BE CONNECTED TO THE
INTERNET WITHOUT FIRST CHANGING *ALL* THE DEFAULT ACCOUNT/PASSWORD
DETAILS.

*NOTES:*
- Docker doesn't run on Linux Kernel 2.6 so cannot be used.
- Newer available versions can be tested by updating the VERSION
  indicator in the bootstrap.sh file (and rebuilding the VM).
- Guest addition handling packages are also installed (as well as 
  some of the more common text editors - emacs, nano and vim).
- When using this for developing additional components/pipelines, they
  *must* be periodically backed up into the /vagrant directory which
  is shared with the host machine.

* Before Starting

The two main components which have to be installed on the host machine
are:

    - VirtualBox - 5.0.10 (https://www.virtualbox.org)
    - Vagrant - 1.7.4 (https://www.vagrantup.com/)

There is also a need for a command-line tool such as bash, shell, etc
and that the paths are set correctly for 'vagrant' to be
executable. These are the latest versions which have been tested
(prior versions will not be tested). On Windows, [[http://www.cygwin.org][cygwin]] or [[https://git-for-windows.github.io/][git bash]]
could be installed which will provide bash along with an assortment of
other GNU open-source tools.

* Building the VM

On the command line:

- *git clone https://github.com/tenforce/vagrant-codi-2-centos65.git*
- *cd vagrant-codi-2-centos65*
- *vagrant plugin install vagrant-vbguest*
- *vagrant plugin install cachier*
- *vagrant up* 

  Possibly select you network interface connection point This will
  take a *long* time the first time

Then to make sure the GUI interface is usable from the virtual machine

- *vagrant halt*
- *vagrant up*

Then it should be possible to use the virtual machine:
 
- Login password: /vagrant/

- Select the *firefox* web-browser

  Normally, this should present you a [[file:homepage.html][homepage]] from which you can
  access the installed software (all account details and development
  information are provided there).

* Installing UV on the VM
This is intended to mimic the installation process on a clean system
(such as one created by the vagrant up command). There is no backing
up of the system, so a backup should be made before running this
command. The commands to run should be:

#+BEGIN_QUOTE
cd /vagrant
sudo ./install_uv_components.sh /email-account/ /email-password/
#+END_QUOTE

This will take a while, but should result in the system being updated
with UnifiedViews installed and running (*Note* if some of the sites
are unavailable for downloading, then the downloading and installation
will fail).

The installation script will maintain a copy of the downloaded files
in the /vagrant/downloads directory with a view to reducting the cost
in the event of a rebuild of the systsem.

* Installing UV offline
Using the install script to setup for building and installing the
software offline is a multi-stage process (starting once the vagrant
machine has been booted/created).

1./ Set the DOWNLOAD_ALLOWED variable to "yes" (when connected to the
    internet). Once logged in, in a terminal:

    #+BEGIN_QUOTE
    sudo DOWNLOAD_ALLOWED=yes ./install_uv_components.sh /email-account/ /email-password/
    #+END_QUOTE

2./ Build the system at least once (so that the downloads are cached
    in the /vagrant directory).

3./ Copy the vagrant directory onto the remote system.

4./ Rerun the installation script with the DOWNLOAD_ALLOWED variable
    set to "no".

* Notes
Depending on the host system, it seems that the network connections
settings sometimes cause problems (*halt*, wait a while and *up*
again, normally clears the problem).
